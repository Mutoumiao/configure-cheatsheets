{
  "compilerOptions": {
    /* 基本选项 */
    "incremental": true,                   /* 启用渐进式编译 */
    "target": "es5",                          /* 指定ECMAScript的目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "module": "commonjs",                     /* 指定模块代码的生成: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": [],                             /* 指定要包含在编译中的库文件. */
    "allowJs": true,                       /* 允许javascript文件被编译. */
    "checkJs": true,                       /* 报告.js文件中的错误 */
    "jsx": "preserve",                     /* 指定JSX代码的生成: 'preserve', 'react-native', or 'react'. */
    "declaration": true,                   /* 产生相应的 '.d.ts' file. */
    "declarationMap": true,                /* 为每个相应的 '.d.ts' file. */
    "sourceMap": true,                     /* 产生相应的 '.map' file. */
    "outFile": "./",                       /* 串联并输出到单个文件中. */
    "outDir": "./",                        /* 重定向输出结构到目录. */
    "rootDir": "./",                       /* 指定输入文件的根目录.用 --outDir 来控制输出目录结构. */
    "composite": true,                     /* 启用项目编译 */
    "tsBuildInfoFile": "./",               /* 指定文件来存储增量编译信息 */
    "removeComments": true,                /* 不要向输出发出评论. */
    "noEmit": true,                        /* 不发出输出. */
    "importHelpers": true,                 /* 从'tslib'中导入发射帮助器. */
    "downlevelIteration": true,            /* 在针对'ES5'或'ES3'时，在'for-of'、spread和destructuring中提供对iterable的全面支持. */
    "isolatedModules": true,               /* 将每个文件作为一个单独的模块进行编译（类似于'ts.transpileModule'）. */

    /* 严格的类型检查选项 */
    "strict": true,                           /* 启用所有严格的类型检查选项. */
    "noImplicitAny": true,                 /* 对具有隐含 "任何 "类型的表达式和声明提出错误. */
    "strictNullChecks": true,              /* 启用严格的空值检查. */
    "strictFunctionTypes": true,           /* 启用对函数类型的严格检查. */
    "strictBindCallApply": true,           /* 在函数上启用严格的 "绑定"、"调用 "和 "应用 "方法. */
    "strictPropertyInitialization": true,  /* 启用对类中属性初始化的严格检查. */
    "noImplicitThis": true,                /* 对具有隐含 "any" 类型的 "this" 表达式提出错误. */
    "alwaysStrict": true,                  /* 在严格模式下进行解析，并为每个源文件发出 "use strict". */

    /* 额外检查 */
    "noUnusedLocals": true,                /* 对未使用的本地人报告错误. */
    "noUnusedParameters": true,            /* 报告未使用参数的错误. */
    "noImplicitReturns": true,             /* 当函数中不是所有的代码路径都返回一个值时报告错误. */
    "noFallthroughCasesInSwitch": true,    /* 在switch语句中，对落空的情况报告错误. */

    /* 模块分辨率选项 */
    "moduleResolution": "node",            /* 指定模块解析策略：'node'（Node.js）或'classic'（TypeScript 1.6之前）. */
    "baseUrl": "./",                       /* 解决非绝对化模块名称的基础目录. */
    "paths": {},                           /* 一系列的条目，这些条目将进口重新映射到相对于 "baseUrl "的查询位置。. */
    "rootDirs": [],                        /* 根文件夹的列表，这些文件夹的组合内容在运行时代表项目的结构。. */
    "typeRoots": [],                       /* 要包括类型定义的文件夹列表. */
    "types": [],                           /* 编译中要包括的类型声明文件. */
    "allowSyntheticDefaultImports": true,  /* 允许从没有默认导出的模块中默认导入。这并不影响代码排放，只是类型检查。. */
    "esModuleInterop": true,                   /* 通过为所有的导入创建命名空间对象，实现CommonJS和ES模块之间的发射互操作性。暗示'allowSyntheticDefaultImports'. */
    "preserveSymlinks": true,              /* 不解析符号链接的真实路径. */
    "allowUmdGlobalAccess": true,          /* 允许从模块中访问UMD全局. */

    /* 源地图选项 */
    "sourceRoot": "",                      /* 指定调试器应该定位TypeScript文件的位置，而不是源文件的位置. */
    "mapRoot": "",                         /* 指定调试器应定位地图文件的位置，而不是生成的位置. */
    "inlineSourceMap": true,               /* 排放一个带有源地图的单一文件，而不是有一个单独的文件. */
    "inlineSources": true,                 /* 在一个文件中与源码图一起排放源码；需要设置'-inlineSourceMap'或'-sourceMap'. */

    /* 实验性选择 */
    "experimentalDecorators": true,        /* 启用对ES7装饰器的实验性支持. */
    "emitDecoratorMetadata": true,         /* 启用实验性支持，为装饰器发射类型元数据. */
  }
}
